#!/usr/bin/python3
import argparse
import sys

from argo_probe_argo_tools.file import File
from argo_probe_argo_tools.status import Status
from argo_probe_argo_tools.utils import CriticalException, timeout


def main():
    status = Status()

    parser = argparse.ArgumentParser(
        description="ARGO probe that checks file properties; by default, it "
                    "checks only if it exists",
        usage="check_file [-h] -F FILE [-f|-d|-s|-p] [-o OWNER] "
              "[-g GROUP] [-r] [-w] [-x] [-t TIMEOUT]",
        add_help=False
    )
    required = parser.add_argument_group("required")
    optional = parser.add_argument_group("optional")
    required.add_argument(
        "-F", "--file", type=str, dest="file", required=True,
        help="file to check"
    )
    filetype = optional.add_mutually_exclusive_group()
    filetype.add_argument(
        "-f", action="store_true", dest="is_plain", help="is it a plain file"
    )
    filetype.add_argument(
        "-d", action="store_true", dest="is_directory", help="is it a directory"
    )
    filetype.add_argument(
        "-s", action="store_true", dest="is_socket", help="is it a socket"
    )
    filetype.add_argument(
        "-p", action="store_true", dest="is_pipe", help="is it a named pipe"
    )
    optional.add_argument(
        "-o", "--owner", type=str, dest="owner",
        help="is the file owner matching the one given"
    )
    optional.add_argument(
        "-g", "--group", type=str, dest="group",
        help="is the file group matching the one given"
    )
    optional.add_argument(
        "-r", action="store_true", dest="readable",
        help="is it user-or-group readable"
    )
    optional.add_argument(
        "-w", action="store_true", dest="writable",
        help="is it user-or-group writable"
    )
    optional.add_argument(
        "-x", action="store_true", dest="executable",
        help="is it user-or-group executable"
    )
    optional.add_argument(
        "-t", "--timeout", type=int, dest="timeout", default=10,
        help="time in seconds after which the probe will stop execution and "
             "return CRITICAL (default: 10)"
    )
    optional.add_argument(
        "-h", "--help", action="help", default=argparse.SUPPRESS,
        help="Show this help message and exit"
    )
    args = parser.parse_args()

    try:
        with timeout(seconds=args.timeout):
            check = File(filename=args.file)

            status.ok(f"File OK")

            if args.is_plain:
                if not check.is_file():
                    raise CriticalException(f"File is not a plain file")

            if args.is_directory:
                if not check.is_directory():
                    raise CriticalException(f"File is not a directory")

            if args.is_socket:
                if not check.is_socket():
                    raise CriticalException(f"File is not a socket")

            if args.is_pipe:
                if not check.is_fifo():
                    raise CriticalException(f"File is not a named pipe")

            if args.owner:
                if not check.check_owner(user=args.owner):
                    raise CriticalException(
                        f"File owner does not match '{args.owner}'"
                    )

            if args.group:
                if not check.check_group(group=args.group):
                    raise CriticalException(
                        f"File group does not match '{args.group}'"
                    )

            if args.readable:
                if not check.is_readable():
                    raise CriticalException(f"File is not readable")

            if args.writable:
                if not check.is_writable():
                    raise CriticalException(f"File is not writable")

            if args.executable:
                if not check.is_executable():
                    raise CriticalException(f"File is not executable")

    except CriticalException as e:
        status.critical(str(e))

    except TimeoutError:
        status.critical("Timeout")

    except Exception as e:
        status.unknown(str(e))

    print(status.get_msg())
    sys.exit(status.get_code())


if __name__ == "__main__":
    main()
